import { getSession } from "next-auth/react";
import Head from "next/head";
import React from "react";
import Layout from "~/components/Layout";
import type { NextApiRequest, NextApiResponse } from "next";
import superjson from "superjson";
import { createProxySSGHelpers } from "@trpc/react-query/ssg";
import { appRouter } from "~/server/api/root";
import { createTRPCContext } from "~/server/api/trpc";
import { api } from "~/utils/api";

export default function Invoice() {
  const { data: theme } = api.user.getPrefTheme.useQuery();
  const { data: invoicesData } = api.invoice.getInvoices.useQuery();

  return (
    <>
      <Head>
        <title>Invoices</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Layout isDarkMode={theme?.darkMode ?? false}>
        <span>test</span>
      </Layout>
    </>
  );
}

export const getServerSideProps = async ({
  req,
  res,
}: {
  req: NextApiRequest;
  res: NextApiResponse;
}) => {
  const session = await getSession({ req });

  if (!session?.user) {
    return {
      redirect: {
        destination: "/",
        permanent: false,
      },
    };
  }

  const ssg = createProxySSGHelpers({
    router: appRouter,
    ctx: await createTRPCContext({
      req: req,
      res: res,
    }),
    transformer: superjson,
  });

  await ssg.user.getPrefTheme.prefetch();
  await ssg.invoice.getInvoices.prefetch();

  return {
    props: {
      trpcState: ssg.dehydrate(),
    },
  };
};
